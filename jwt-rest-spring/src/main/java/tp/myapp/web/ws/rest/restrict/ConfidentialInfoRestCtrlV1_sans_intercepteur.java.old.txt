package tp.myapp.web.ws.rest.restrict;


import java.util.List;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import tp.myapp.auth.token.TokenManager;
import tp.myapp.auth.token.basic.BasicUuidTokenManager;
import tp.myapp.web.ws.rest.data.Infos;
import tp.myapp.web.ws.rest.interceptor.annotation.AuthTokenRequired;

@RestController 
//@CrossOrigin(origins = "*")
@RequestMapping(value="/private/rest/confidential-infos" , headers="Accept=application/json")
public class ConfidentialInfoRestCtrl {
	
	private TokenManager tokenManager = BasicUuidTokenManager.getInstance();
	
	private String extractBearerTokenFromHttpHeaders(HttpHeaders headers){
		List<String> listOfAuthorization= headers.get(HttpHeaders.AUTHORIZATION);
		if(listOfAuthorization==null || listOfAuthorization.size()==0){
			return null;
		}
		String mainAuthorisation = listOfAuthorization.get(0);
		System.out.println(mainAuthorisation);
		if(mainAuthorisation.length()<8) {
			return null;
		}
		//Format de l'authorisation standard http:
		//Authorization: Bearer 1234ab344..token_au_porteur...566
		//ou bien 
		//Authorization: Basic A45D3455
		if(mainAuthorisation.startsWith("Bearer")){
			return mainAuthorisation.substring(7);
		}
		return  null;
	}
	
	private boolean isCallerAllowed(HttpHeaders headers){
		boolean allowed=false;
		String token=extractBearerTokenFromHttpHeaders(headers);
		if(token !=null && tokenManager.verifyToken(token)){
			allowed = true;
		}
		return allowed;
	}

	//.../mvc/private/rest/confidential-infos/?category=news
	@RequestMapping(value="/" , method=RequestMethod.GET) 
	public ResponseEntity<Infos> getInfos(@RequestParam(name="category") String category,
			                              @RequestHeader HttpHeaders headers){		
		if(isCallerAllowed(headers)){
		   Infos infos = new Infos(category,"confidential_info_xyz");
		   return new ResponseEntity<Infos>(infos, HttpStatus.OK);
		}
		else{
			return new ResponseEntity<Infos>(HttpStatus.UNAUTHORIZED);//if no token or ...
			//return new ResponseEntity<Infos>(HttpStatus.FORBIDDEN);//if token ok but no role 
		}
	}

	
}
